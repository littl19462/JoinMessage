name: Build and Release Plugin

on:
  # 添加手动触发支持
  workflow_dispatch:
    inputs:
      tag:
        description: '要构建的标签 (例如 v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string
  
  # 保留原有的自动触发
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    # 添加超时设置
    timeout-minutes: 15
    
    steps:
    # 1. 检出代码（包含标签）
    - name: Checkout code with tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史
        ref: ${{ github.ref }}
      
    # 2. 设置Java环境
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    # 3. 从标签提取版本号
    - name: Extract version from tag
      id: extract-version
      run: |
        # 提取版本号（兼容 v1.0.0 和 v1.0）
        VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Using version: $VERSION"
        
    # 4. 设置Maven版本
    - name: Set Maven version
      run: |
        mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }}
        
    # 5. 构建插件
    - name: Build plugin with Maven
      run: mvn -B clean package
      
    # 6. 验证构建产物
    - name: Verify artifacts
      run: |
        echo "Generated files:"
        ls -la target/
        if [ ! -f "target/JoinMessage-${{ env.RELEASE_VERSION }}.jar" ]; then
          echo "ERROR: JAR file not found!"
          exit 1
        fi
      
    # 7. 创建GitHub Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          target/*.jar  # 使用通配符确保匹配
        name: JoinMessage ${{ env.RELEASE_VERSION }}
        tag_name: v${{ env.RELEASE_VERSION }}
        body: |
          ## JoinMessage ${{ env.RELEASE_VERSION }}
          
          ### 安装说明
          1. 下载 JAR 文件
          2. 放入服务器的 `plugins` 文件夹
          3. 重启服务器
          
          [查看完整文档](https://github.com/${{ github.repository }})
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # 8. 失败通知
    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const message = `🚨 发布失败: ${{ github.repository }}@v${{ env.RELEASE_VERSION }}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
